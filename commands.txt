•	Cd .. : Te lleva al directorio padre
•	Pwd : Te dice el directorio donde estás
•	Cd / : Directorio Root
•	Ls : archivos
•	cd /mnt/c : directorio C de la PC
•	cd ~ : Te lleva a Home
•	sudo mkdir NombreDeCarpeta: Crear carpeta
•	touch nombredelarchivo.txt : Crear un archivo
•	mv nombredelarchivo.txt NombreDeCarpeta : Mueve archivos a carpetas
•	code . : Te abre VSCode (Instalar Remote – WSL)
•	(si no se tiene instalado la compatibilidad con VSCode se instala primero y después repetir comando)
•	explorer.exe . : Abre explorer en la carpeta de Ubuntu
•	cat index.html : Nos muestra el contenido en texto plano de un archivo
•	man cat : Te da un manual de los comandos. Funciona con todos
•	sudo apt-get update: Busca actualizaciones
•	sudo apt-get upgrade: Las instala
•	sudo apt install nombredelpaquete : Instala paquetes nuevos
•	clear : Limpia la pantalla
•	rm -d Carpeta : Borra una carpeta
•	rm archivo.exe : Borra un archivo
•	ls -al : Te muestra todos los archivos (también ocultos) y con sus permisos
•   history : Te da el historial de todos tus comandos
•   !72 : Número de comando. Repite el comando descubierto con history

______________________________________________________________________
Conectar el GitHub
echo "NombreDelProyecto" >> README.md
•   git init
•   git add README.md
•   git add archivos.txt : Todos los archivos que necesitas en el proyecto
o
•   git add -all : Rellena todos los archivos en la carpeta
(antes del siguiente si no lo has hecho:) 
    •	git config --global user.name "kudi-code"
    •	git config --global user.email kievinsal.casas@gmail.com
    •	git –edit –global (nadamás para revisar si todo está correcto)
•   git commit -m "first commit"
•   git branch -M main : Main es el el branch principal de GitHub
•   git remote add origin https://github.com/kudi-code/holi.git
•   git push -u origin main
    •	Tu correo y TOKEN DE GITHUB, NO TU CONTRASEÑA
•   git status : Te muestra el estado de tu proyecto git
______________________________________________________________________
Un Poco más a profundidad Git:
•   git rm --cached archivo.txt : Si le diste add, te lo quita de la versión cambiada en Git, volviendo a la versión anterior
•   git commit "Cambios" : Declaras la versión de tu archivo
•   git log archivo.txt : Te devuelve los cambios realizados al archivo
______________________________________________________________________
•   git show archivo.txt : te muestra los cambios internos a detalle del archivo 
        \ No newline at end of file 
        (END) (presionar Q)
•   git log archivo.txt y git diff : Hace la diferencia entre versiones de 2 archivos en el tiempo
        Ejemplo: git diff f2d613f46a0ba05f2f4e79b740d94da37f 438f9bd8fbb6cc0b3f420c153b7606f8837736f4
        Compara la versión 0 con la 1.0.2
•   git reset version --hard : Cambia TODO a la versión anterior
        Ejemplo: git reset f2d613f46a0ba05f2f4e79b740d94da37f --hard
        Notas: Hay que tener cuidado con este comando, ya que TODAS LAS VERSIONES que se realizaron
        después de esta versión se perderán

