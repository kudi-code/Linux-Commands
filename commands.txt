•	Cd .. : Te lleva al directorio padre
•	Pwd : Te dice el directorio donde estás
•	Cd / : Directorio Root
•	Ls : archivos
•	cd /mnt/c : directorio C de la PC
•	cd ~ : Te lleva a Home
•	sudo mkdir NombreDeCarpeta: Crear carpeta
•	touch nombredelarchivo.txt : Crear un archivo
•	mv nombredelarchivo.txt NombreDeCarpeta : Mueve archivos a carpetas
•	code . : Te abre VSCode (Instalar Remote – WSL)
•	(si no se tiene instalado la compatibilidad con VSCode se instala primero y después repetir comando)
•	explorer.exe . : Abre explorer en la carpeta de Ubuntu
•	cat index.html : Nos muestra el contenido en texto plano de un archivo
•	man cat : Te da un manual de los comandos. Funciona con todos
•	sudo apt-get update: Busca actualizaciones
•	sudo apt-get upgrade: Las instala
•	sudo apt install nombredelpaquete : Instala paquetes nuevos
•	clear : Limpia la pantalla
•	rm -d Carpeta : Borra una carpeta
•	rm archivo.exe : Borra un archivo
•	ls -al : Te muestra todos los archivos (también ocultos) y con sus permisos
•   history : Te da el historial de todos tus comandos
•   !72 : Número de comando. Repite el comando descubierto con history
•   alias timeline="git log --all --graph --decorate --oneline" : creas con cualquier otro comando un "shortcut"
______________________________________________________________________
Lo que harás siempre al guardar cambios:
•   git commit -am "mensaje"
•   git log o git status
•   git push -u origin main para mandarlo a GitHub
______________________________________________________________________
Conectar el GitHub
echo "NombreDelProyecto" >> README.md
•   git init
•   git add README.md
•   git add archivos.txt : Todos los archivos que necesitas en el proyecto
o
•   git add -all : Rellena todos los archivos en la carpeta
(antes del siguiente si no lo has hecho:) 
    •	git config --global user.name "kudi-code"
    •	git config --global user.email kievinsal.casas@gmail.com
    •	git –edit –global (nadamás para revisar si todo está correcto)
•   git commit -m "first commit"
o
•   git commit -am "Mensaje" : Te hace un add y un commit a la vez
•   git branch -M main : Main es el el branch principal de GitHub
•   git remote add origin https://github.com/kudi-code/holi.git
•   git push -u origin main
    •	Tu correo y TOKEN DE GITHUB, NO TU CONTRASEÑA
•   git status : Te muestra el estado de tu proyecto git
______________________________________________________________________
Un Poco más a profundidad Git:
•   git rm --cached archivo.txt : Si le diste add, te lo quita de la versión cambiada en Git, volviendo a la versión anterior
•   git commit -m "Cambios" : Declaras la versión de tu archivo
•   git log archivo.txt : Te devuelve los cambios realizados al archivo
______________________________________________________________________
•   git show archivo.txt : te muestra los cambios internos a detalle del archivo 
        \ No newline at end of file 
        (END) (presionar Q)
•   git log archivo.txt y git diff : Hace la diferencia entre versiones de 2 archivos en el tiempo
        Ejemplo: git diff f2d613f46a0ba05f2f4e79b740d94da37f 438f9bd8fbb6cc0b3f420c153b7606f8837736f4
        Compara la versión 0 con la 1.0.2
•   git reset version --hard : Cambia TODO a la versión anterior
        Ejemplo: git reset f2d613f46a0ba05f2f4e79b740d94da37f --hard
        Notas: Hay que tener cuidado con este comando, ya que TODAS LAS VERSIONES que se realizaron
        después de esta versión se perderán
•   git log --stat : Te desglosa los cambios por version
•   git checkout version archivo.txt : Te trae de regreso un archivo de una version anterior
        Ejemplo: git checkout 8064c408fa616bebf74119783b9d29decd4c35a6 commands.txt
        No hay de que preocuparse . si quieres volver a la versión master escribir
        •   git checkout master archivo.txt
        Corroborado: No pasa nada
•   git rm --cached: Elimina los archivos de nuestro repositorio local y del área de staging,
    pero los mantiene en nuestro disco duro. Básicamente le dice a Git que deje de trackear el 
    historial de cambios de estos archivos, por lo que pasaran a un estado untracked.
•   git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo,
    por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos
    recuperarlos si es necesario (pero debemos usar comandos más avanzados).
•   !important :
    •   git reset: Este comando nos ayuda a volver en el tiempo. Pero no como git checkout que nos 
        deja ir, mirar, pasear y volver. Con git reset volvemos al pasado sin la posibilidad de volver 
        al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.
        •   git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios
            que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.
        •   git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la información de los commits
            y del área de staging se borra del historial.
        •   git reset HEAD: Este es el comando para sacar archivos del área de staging. No para borrarlos
            ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, 
            a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.
    •   Caso hipotético: Tienes una carpeta de una página, pero el .css aún no está listo
        •   Si ya añadiste este archivo con git add . Lo que debes hacer es sacarlo del add . , es decir:
            git rm --cached archivo.css
            así, una vez terminado de editarse ese archivo se añade de nuevo con git add archivo.css
______________________________________________________________________
•   git commit -am "mensaje": Hace add sólo a los archivos previamente añadidos con add
    •   git commit -a : Abre el editor de texto
        •   esc+i : Insertar texto
        •   esc+shift+z+z o ctrl+s: guardar
        •   ctrl+x :  Salir
Creando la branch
•   git status
•   git branch NombredelaRama : Crea la rama
•   git checkout NombredelaRama : Te mueves de rama
Añadimos los archivos a la branch
•   git add Archivos.txt
•   git commit -m "Mensaje"
Listo. Para cambiar de branch, nos movemos de branch: git checkout NombredelaRama
______________________________________________________________________
•   git branch : te dice en que rama estás y cuales son las ramas existentes
Para Hacer un merge
•   git checkout master
•   git branch : Para corroborar
•   git merge branch -m "Mensaje"
    •   Ejemplo: git merge header -m "Fusion"
______________________________________________________________________
Resolver conflictos de Merge: Revisar el Word
______________________________________________________________________
Traerse un proyecto de GitHub nuevo y sobreescribirlo con el nuestro
•   git remote add origin https://tuproyecto.com
•   git remote -v : Corroboramos que es correcto
•   git pull origin master
•   git push origin rama : Le hasces push a la rama
    •   git push origin master
•   git pull origin master --allow-unrelated-histories : Forzas a reescribir las ramas
•   git pull origin master
______________________________________________________________________
Configurar llave SSH
•   git config -l : Revisa tus config
•   ssh-keygen -t rsa -b 4096 -C "youremail@example.com"
    ssh-agent bash
•   eval "$(ssh-agent)"
•   ssh-add ~/.ssh/id_rsa
Una vez listo copiamos la llave pública (/home/user/.ssh/id_rsa.pub) y le pegamos en GitHub en
el menú settings/ssh
Cambiando la repo a una SSH
•   git remote set-url origin github.com/...
    •   NOTA IMPORTANTE: Para gestionar varias repo´s basta con camiar origin por el nombre deseado
        es decir, si queremos la repo "juanito" ponemos: git remote set-url juanito juanito.com/...
•   git pull : nadamás para confirmar el pull
______________________________________________________________________
Tags 
•   git log --all --graph --decorate --oneline : Te enseña todos los cambios realizados gráficamente
•   git tag -a NombreDelTag -m "Mensaje" hash
    •   Ejemplo: git tag -a Version-1 -m "Primera Version del código" 9dc4e00
•   git pull origin master : jalas lo que hay en internet antes de subir lo que sea
•   git push origin --tags : subes sólamente las tags

Borrar tag
•   git tag
•   git tag -d NombreDelTag
______________________________________________________________________
branch
•   git show-branch --all : Muestra un histórico por ramas
•   gitk : Te muestra todo gráfico 
    Si estamos en WSL2 instalar primero https://sourceforge.net/projects/vcxsrv/files/latest/download
    instalamos sin cliente y marcamos "disable access control"
    el programa debe estar abierto
    Luego aplicamos los siguentes comandos
    •   export DISPLAY="`grep nameserver /etc/resolv.conf | sed 's/nameserver //'`:0"
    •   export DISPLAY="`sed -n 's/nameserver //p' /etc/resolv.conf`:0"
    •   export DISPLAY=$(ip route|awk '/^default/{print $3}'):0.0
    •   echo $DISPLAY : para revisar que esté correcto
    Y al final colocar gitk ESTANDO DENTRO DE LA CARPETA DEL PROYECTO GIT
______________________________________________________________________
Clonar un repo:
•   git clone https://Tusitio.com
______________________________________________________________________
Git Stash (útil para "guardar" parcialmente un avance y regresar 1)
•   git stash : te regresa 1 y "guarda" en stash tus cambios
•   git stash list : Lista de stash
•   git stash branch NombredelaRama : Guarda en una rama los cambios previamente "guardados" en stash
•   git stash drop : útil acompañado primero de un git stash para regresar a una versión anterior
    y desechar el stash realizado 
______________________________________________________________________
Git Clean (limpia archivos no deseados)
•   git clean --dry-run : Te dice que va a borrar
•   git clean -f : borra los archivos "de más"
•   git clean -df : Borra archivos y carpetas "de más"
______________________________________________________________________
Git cherry-pick
•   git cherry-pick commit : Estando en la branch receptora se pide un commit de otra rama
    •   Ejemplo: git cherry-pick f2d613f46a0ba05f2f4e79b740d94da37f
______________________________________________________________________
Amend
git commit --ammend : "Remienda" un commit incompleto
